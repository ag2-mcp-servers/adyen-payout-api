# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:07:39+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity, HTTPBasic

from models import (
    ModifyRequest,
    ModifyResponse,
    PayoutRequest,
    PayoutResponse,
    ServiceError,
    StoreDetailAndSubmitRequest,
    StoreDetailAndSubmitResponse,
    StoreDetailRequest,
    StoreDetailResponse,
    SubmitRequest,
    SubmitResponse,
)

app = MCPProxy(
    contact={
        'email': 'developer-experience@adyen.com',
        'name': 'Adyen Developer Experience team',
        'url': 'https://www.adyen.help/hc/en-us/community/topics',
        'x-twitter': 'Adyen',
    },
    description='A set of API endpoints that allow you to store payout details, confirm, or decline a payout.\n\nFor more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts).\n## Authentication\nTo use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don\'t have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).\n\nBoth of these API credentials must be authenticated with [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).The following example shows how to authenticate your request when submitting a payout:\n\n```\ncurl\n-U "storePayout@Company.YOUR_COMPANY_ACCOUNT":"YOUR_BASIC_AUTHENTICATION_PASSWORD" \\\n-H "Content-Type: application/json" \\\n...\n```\n\n## Versioning\nPayments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.\n\nFor example:\n```\nhttps://pal-test.adyen.com/pal/servlet/Payout/v68/payout\n```\n\n## Going live\n\nTo authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.\n\nThe live endpoint URLs contain a prefix which is unique to your company account:\n```\n\nhttps://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v68/payout\n```\n\nGet your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.',
    termsOfService='https://www.adyen.com/legal/terms-and-conditions',
    title='Adyen Payout API',
    version='68',
    servers=[{'url': 'https://pal-test.adyen.com/pal/servlet/Payout/v68'}],
)


@app.post(
    '/confirmThirdParty',
    description=""" Confirms a previously submitted payout.

To cancel a payout, use the `/declineThirdParty` endpoint. """,
    tags=['payout_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_confirm_third_party(body: ModifyRequest = None):
    """
    Confirm a payout
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/declineThirdParty',
    description=""" Cancels a previously submitted payout.

To confirm and send a payout, use the `/confirmThirdParty` endpoint. """,
    tags=['payout_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_decline_third_party(body: ModifyRequest = None):
    """
    Cancel a payout
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/payout',
    description=""" With this call, you can pay out to your customers, and funds will be made available within 30 minutes on the cardholder's bank account (this is dependent on whether the issuer supports this functionality). Instant card payouts are only supported for Visa and Mastercard cards. """,
    tags=['payout_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payout(body: PayoutRequest = None):
    """
    Make an instant card payout
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/storeDetail',
    description=""" Stores payment details under the `PAYOUT` recurring contract. These payment details can be used later to submit a payout via the `/submitThirdParty` call. """,
    tags=['payout_detail_storage'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_store_detail(body: StoreDetailRequest = None):
    """
    Store payout details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/storeDetailAndSubmitThirdParty',
    description=""" Submits a payout and stores its details for subsequent payouts.

The submitted payout must be confirmed or declined either by a reviewer or via `/confirmThirdParty` or `/declineThirdParty` calls. """,
    tags=['payout_management', 'payout_detail_storage'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_store_detail_and_submit_third_party(body: StoreDetailAndSubmitRequest = None):
    """
    Store details and submit a payout
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/submitThirdParty',
    description=""" Submits a payout using the previously stored payment details. To store payment details, use the `/storeDetail` API call.

The submitted payout must be confirmed or declined either by a reviewer or via `/confirmThirdParty` or `/declineThirdParty` calls. """,
    tags=['payout_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_submit_third_party(body: SubmitRequest = None):
    """
    Submit a payout
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
