# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:07:39+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, Field, constr


class Address(BaseModel):
    city: constr(max_length=3000) = Field(
        ..., description='The name of the city. Maximum length: 3000 characters.'
    )
    country: str = Field(
        ...,
        description="The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n> If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.",
    )
    houseNumberOrName: constr(max_length=3000) = Field(
        ...,
        description='The number or name of the house. Maximum length: 3000 characters.',
    )
    postalCode: str = Field(
        ...,
        description='A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.',
    )
    stateOrProvince: Optional[str] = Field(
        None,
        description='The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.',
    )
    street: constr(max_length=3000) = Field(
        ...,
        description='The name of the street. Maximum length: 3000 characters.\n> The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.',
    )


class Amount(BaseModel):
    currency: constr(min_length=3, max_length=3) = Field(
        ...,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).',
    )
    value: int = Field(
        ...,
        description='The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )


class BankAccount(BaseModel):
    bankAccountNumber: Optional[str] = Field(
        None, description='The bank account number (without separators).'
    )
    bankCity: Optional[str] = Field(None, description='The bank city.')
    bankLocationId: Optional[str] = Field(
        None,
        description='The location id of the bank. The field value is `nil` in most cases.',
    )
    bankName: Optional[str] = Field(None, description='The name of the bank.')
    bic: Optional[str] = Field(
        None,
        description='The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.',
    )
    countryCode: Optional[str] = Field(
        None,
        description="Country code where the bank is located.\n\nA valid value is an ISO two-character country code (e.g. 'NL').",
    )
    iban: Optional[str] = Field(
        None,
        description='The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).',
    )
    ownerName: Optional[str] = Field(
        None,
        description="The name of the bank account holder.\nIf you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:\n* χ12 is converted to ch12.\n* üA is converted to euA.\n* Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\nAfter replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:\n* John17 - allowed.\n* J17 - allowed.\n* 171 - not allowed.\n* John-7 - allowed.\n> If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.",
    )
    taxId: Optional[str] = Field(None, description="The bank account holder's tax ID.")


class Card(BaseModel):
    cvc: Optional[constr(min_length=1, max_length=20)] = Field(
        None,
        description='The [card verification code](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid) (1-20 characters). Depending on the card brand, it is known also as:\n* CVV2/CVC2 – length: 3 digits\n* CID – length: 4 digits\n> If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server.\n> This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments).\n> When this value is returned in a response, it is always empty because it is not stored.',
    )
    expiryMonth: Optional[constr(min_length=1, max_length=2)] = Field(
        None,
        description='The card expiry month.\nFormat: 2 digits, zero-padded for single digits. For example:\n* 03 = March\n* 11 = November',
    )
    expiryYear: Optional[constr(min_length=4, max_length=4)] = Field(
        None, description='The card expiry year.\nFormat: 4 digits. For example: 2020'
    )
    holderName: Optional[constr(min_length=1, max_length=50)] = Field(
        None, description='The name of the cardholder, as printed on the card.'
    )
    issueNumber: Optional[constr(min_length=1, max_length=2)] = Field(
        None, description='The issue number of the card (for some UK debit cards only).'
    )
    number: Optional[constr(min_length=4, max_length=19)] = Field(
        None,
        description='The card number (4-19 characters). Do not use any separators.\nWhen this value is returned in a response, only the last 4 digits of the card number are returned.',
    )
    startMonth: Optional[constr(min_length=1, max_length=2)] = Field(
        None,
        description='The month component of the start date (for some UK debit cards only).',
    )
    startYear: Optional[constr(min_length=4, max_length=4)] = Field(
        None,
        description='The year component of the start date (for some UK debit cards only).',
    )


class FraudCheckResult(BaseModel):
    accountScore: int = Field(
        ..., description='The fraud score generated by the risk check.'
    )
    checkId: int = Field(..., description='The ID of the risk check.')
    name: str = Field(..., description='The name of the risk check.')


class FraudCheckResultWrapper(BaseModel):
    FraudCheckResult_1: Optional[FraudCheckResult] = Field(
        None, alias='FraudCheckResult'
    )


class FraudResult(BaseModel):
    accountScore: int = Field(
        ..., description='The total fraud score generated by the risk checks.'
    )
    results: Optional[List[FraudCheckResultWrapper]] = Field(
        None, description='The result of the individual risk checks.'
    )


class ModifyRequest(BaseModel):
    additionalData: Optional[Dict[str, str]] = Field(
        None,
        description='This field contains additional data, which may be required for a particular payout request.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    originalReference: str = Field(
        ...,
        description='The PSP reference received in the `/submitThirdParty` response.',
    )


class ModifyResponse(BaseModel):
    additionalData: Optional[Dict[str, str]] = Field(
        None,
        description='This field contains additional data, which may be returned in a particular response.',
    )
    pspReference: str = Field(
        ...,
        description="Adyen's 16-character string reference associated with the transaction. This value is globally unique; quote it when communicating with us about this response.",
    )
    response: str = Field(
        ...,
        description='The response:\n* In case of success, it is either `payout-confirm-received` or `payout-decline-received`.\n* In case of an error, an informational message is returned.',
    )


class Name(BaseModel):
    firstName: str = Field(..., description='The first name.')
    lastName: str = Field(..., description='The last name.')


class ShopperInteraction(Enum):
    Ecommerce = 'Ecommerce'
    ContAuth = 'ContAuth'
    Moto = 'Moto'
    POS = 'POS'


class ResultCode(Enum):
    AuthenticationFinished = 'AuthenticationFinished'
    AuthenticationNotRequired = 'AuthenticationNotRequired'
    Authorised = 'Authorised'
    Cancelled = 'Cancelled'
    ChallengeShopper = 'ChallengeShopper'
    Error = 'Error'
    IdentifyShopper = 'IdentifyShopper'
    Pending = 'Pending'
    PresentToShopper = 'PresentToShopper'
    Received = 'Received'
    RedirectShopper = 'RedirectShopper'
    Refused = 'Refused'
    Success = 'Success'


class Contract(Enum):
    ONECLICK = 'ONECLICK'
    RECURRING = 'RECURRING'
    PAYOUT = 'PAYOUT'


class TokenService(Enum):
    VISATOKENSERVICE = 'VISATOKENSERVICE'
    MCTOKENSERVICE = 'MCTOKENSERVICE'


class Recurring(BaseModel):
    contract: Optional[Contract] = Field(
        None,
        description='The type of recurring contract to be used.\nPossible values:\n* `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).\n* `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).\n* `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.\n* `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).',
    )
    recurringDetailName: Optional[str] = Field(
        None, description='A descriptive name for this detail.'
    )
    recurringExpiry: Optional[datetime] = Field(
        None,
        description='Date after which no further authorisations shall be performed. Only for 3D Secure 2.',
    )
    recurringFrequency: Optional[str] = Field(
        None,
        description='Minimum number of days between authorisations. Only for 3D Secure 2.',
    )
    tokenService: Optional[TokenService] = Field(
        None, description='The name of the token service.'
    )


class ResponseAdditionalData3DSecure(BaseModel):
    cardHolderInfo: Optional[str] = Field(
        None,
        description='Information provided by the issuer to the cardholder. If this field is present, you need to display this information to the cardholder. ',
    )
    cavv: Optional[str] = Field(
        None,
        description='The Cardholder Authentication Verification Value (CAVV) for the 3D Secure authentication session, as a Base64-encoded 20-byte array.',
    )
    cavvAlgorithm: Optional[str] = Field(None, description='The CAVV algorithm used.')
    scaExemptionRequested: Optional[str] = Field(
        None,
        description='Shows the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that Adyen requested for the payment.\n\n Possible values:\n* **lowValue** \n* **secureCorporate** \n* **trustedBeneficiary** \n* **transactionRiskAnalysis** ',
    )
    threeds2_cardEnrolled: Optional[bool] = Field(
        None,
        alias='threeds2.cardEnrolled',
        description='Indicates whether a card is enrolled for 3D Secure 2.',
    )


class ResponseAdditionalDataBillingAddress(BaseModel):
    billingAddress_city: Optional[str] = Field(
        None,
        alias='billingAddress.city',
        description='The billing address city passed in the payment request.',
    )
    billingAddress_country: Optional[str] = Field(
        None,
        alias='billingAddress.country',
        description='The billing address country passed in the payment request.\n\nExample: NL',
    )
    billingAddress_houseNumberOrName: Optional[str] = Field(
        None,
        alias='billingAddress.houseNumberOrName',
        description='The billing address house number or name passed in the payment request.',
    )
    billingAddress_postalCode: Optional[str] = Field(
        None,
        alias='billingAddress.postalCode',
        description='The billing address postal code passed in the payment request.\n\nExample: 1011 DJ',
    )
    billingAddress_stateOrProvince: Optional[str] = Field(
        None,
        alias='billingAddress.stateOrProvince',
        description='The billing address state or province passed in the payment request.\n\nExample: NH',
    )
    billingAddress_street: Optional[str] = Field(
        None,
        alias='billingAddress.street',
        description='The billing address street passed in the payment request.',
    )


class ResponseAdditionalDataCard(BaseModel):
    cardBin: Optional[str] = Field(
        None,
        description='The first six digits of the card number.\n\nThis is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with a six-digit BIN.\n\nExample: 521234',
    )
    cardHolderName: Optional[str] = Field(
        None, description='The cardholder name passed in the payment request.'
    )
    cardIssuingBank: Optional[str] = Field(
        None,
        description='The bank or the financial institution granting lines of credit through card association branded payment cards. This information can be included when available.',
    )
    cardIssuingCountry: Optional[str] = Field(
        None, description='The country where the card was issued.\n\nExample: US'
    )
    cardIssuingCurrency: Optional[str] = Field(
        None,
        description='The currency in which the card is issued, if this information is available. Provided as the currency code or currency number from the ISO-4217 standard. \n\nExample: USD',
    )
    cardPaymentMethod: Optional[str] = Field(
        None,
        description='The card payment method used for the transaction.\n\nExample: amex',
    )
    cardSummary: Optional[str] = Field(
        None,
        description='The last four digits of a card number.\n\n> Returned only in case of a card payment.',
    )
    issuerBin: Optional[str] = Field(
        None,
        description='The first eight digits of the card number. Only returned if the card number is 16 digits or more.\n\nThis is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with an eight-digit BIN.\n\nExample: 52123423',
    )


class FraudResultType(Enum):
    GREEN = 'GREEN'
    FRAUD = 'FRAUD'


class RecurringProcessingModel(Enum):
    CardOnFile = 'CardOnFile'
    Subscription = 'Subscription'
    UnscheduledCardOnFile = 'UnscheduledCardOnFile'


class ResponseAdditionalDataCommon(BaseModel):
    acquirerAccountCode: Optional[str] = Field(
        None,
        description='The name of the Adyen acquirer account.\n\nExample: PayPalSandbox_TestAcquirer\n\n> Only relevant for PayPal transactions.',
    )
    acquirerCode: Optional[str] = Field(
        None,
        description='The name of the acquirer processing the payment request.\n\nExample: TestPmmAcquirer',
    )
    acquirerReference: Optional[str] = Field(
        None,
        description='The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.\n\nExample: 7C9N3FNBKT9',
    )
    alias: Optional[str] = Field(
        None, description='The Adyen alias of the card.\n\nExample: H167852639363479'
    )
    aliasType: Optional[str] = Field(
        None, description='The type of the card alias.\n\nExample: Default'
    )
    authCode: Optional[str] = Field(
        None,
        description='Authorisation code:\n* When the payment is authorised successfully, this field holds the authorisation code for the payment.\n* When the payment is not authorised, this field is empty.\n\nExample: 58747',
    )
    authorisationMid: Optional[str] = Field(
        None, description='Merchant ID known by the acquirer.'
    )
    authorisedAmountCurrency: Optional[str] = Field(
        None,
        description='The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).',
    )
    authorisedAmountValue: Optional[str] = Field(
        None,
        description='Value of the amount authorised.\n\nThis amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).',
    )
    avsResult: Optional[str] = Field(
        None,
        description='The AVS result code of the payment, which provides information about the outcome of the AVS check.\n\nFor possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).',
    )
    avsResultRaw: Optional[str] = Field(
        None,
        description='Raw AVS result received from the acquirer, where available.\n\nExample: D',
    )
    bic: Optional[str] = Field(
        None,
        description='BIC of a bank account.\n\nExample: TESTNL01\n\n> Only relevant for SEPA Direct Debit transactions.',
    )
    coBrandedWith: Optional[str] = Field(
        None, description='Includes the co-branded card information.'
    )
    cvcResult: Optional[str] = Field(
        None, description='The result of CVC verification.', examples=['1 Matches']
    )
    cvcResultRaw: Optional[str] = Field(
        None, description='The raw result of CVC verification.', examples=['M']
    )
    dsTransID: Optional[str] = Field(
        None,
        description='Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.',
    )
    eci: Optional[str] = Field(
        None,
        description='The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.\n\nExample: 02',
    )
    expiryDate: Optional[str] = Field(
        None,
        description='The expiry date on the card.\n\nExample: 6/2016\n\n> Returned only in case of a card payment.',
    )
    extraCostsCurrency: Optional[str] = Field(
        None,
        description='The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.\n\nExample: EUR',
    )
    extraCostsValue: Optional[str] = Field(
        None,
        description='The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.',
    )
    fraudCheck__itemNr___FraudCheckname_: Optional[str] = Field(
        None,
        alias='fraudCheck-[itemNr]-[FraudCheckname]',
        description='The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.',
    )
    fraudManualReview: Optional[str] = Field(
        None, description='Indicates if the payment is sent to manual review.'
    )
    fraudResultType: Optional[FraudResultType] = Field(
        None, description='The fraud result properties of the payment.'
    )
    fundingSource: Optional[str] = Field(
        None,
        description="Information regarding the funding type of the card. The possible return values are:\n* CHARGE\n* CREDIT\n* DEBIT\n* PREPAID\n* PREPAID_RELOADABLE\n\n* PREPAID_NONRELOADABLE\n* DEFFERED_DEBIT\n\n> This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.\n\nFor receiving this field in the notification, enable **Include Funding Source** in **Notifications** > **Additional settings**.",
    )
    fundsAvailability: Optional[str] = Field(
        None,
        description='Indicates availability of funds.\n\nVisa:\n* "I" (fast funds are supported)\n* "N" (otherwise)\n\nMastercard:\n* "I" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list)\n* "N" (otherwise)\n\n> Returned when you verify a card BIN or estimate costs, and only if payoutEligible is "Y" or "D".',
    )
    inferredRefusalReason: Optional[str] = Field(
        None,
        description='Provides the more granular indication of why a transaction was refused. When a transaction fails with either "Refused", "Restricted Card", "Transaction Not Permitted", "Not supported" or "DeclinedNon Generic" refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the `inferredRefusalReason`, field is populated and the `refusalReason`, is set to "Not Supported".\n\nPossible values:\n\n* 3D Secure Mandated\n* Closed Account\n* ContAuth Not Supported\n* CVC Mandated\n* Ecommerce Not Allowed\n* Crossborder Not Supported\n* Card Updated\n\n* Low Authrate Bin\n* Non-reloadable prepaid card',
    )
    isCardCommercial: Optional[str] = Field(
        None, description='Indicates if the card is used for business purposes only.'
    )
    issuerCountry: Optional[str] = Field(
        None,
        description='The issuing country of the card based on the BIN list that Adyen maintains.\n\nExample: JP',
    )
    liabilityShift: Optional[str] = Field(
        None,
        description='A Boolean value indicating whether a liability shift was offered for this payment.',
    )
    mcBankNetReferenceNumber: Optional[str] = Field(
        None,
        description='The `mcBankNetReferenceNumber`, is a minimum of six characters and a maximum of nine characters long.\n\n> Contact Support Team to enable this field.',
    )
    merchantAdviceCode: Optional[str] = Field(
        None,
        description='The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.\n\nFor more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes).',
    )
    merchantReference: Optional[str] = Field(
        None, description='The reference provided for the transaction.'
    )
    networkTxReference: Optional[str] = Field(
        None,
        description='Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.\n\nThis contains either the Mastercard Trace ID or the Visa Transaction ID.',
    )
    ownerName: Optional[str] = Field(
        None,
        description='The owner name of a bank account.\n\nOnly relevant for SEPA Direct Debit transactions.',
    )
    paymentAccountReference: Optional[str] = Field(
        None,
        description='The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.',
    )
    paymentMethod: Optional[str] = Field(
        None, description='The payment method used in the transaction.'
    )
    paymentMethodVariant: Optional[str] = Field(
        None,
        description='The Adyen sub-variant of the payment method used for the payment request.\n\nFor more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).\n\nExample: mcpro',
    )
    payoutEligible: Optional[str] = Field(
        None,
        description='Indicates whether a payout is eligible or not for this card.\n\nVisa:\n* "Y"\n* "N"\n\nMastercard:\n* "Y" (domestic and cross-border)\n\n* "D" (only domestic)\n* "N" (no MoneySend)\n* "U" (unknown)',
    )
    realtimeAccountUpdaterStatus: Optional[str] = Field(
        None,
        description='The response code from the Real Time Account Updater service.\n\nPossible return values are:\n* CardChanged\n* CardExpiryChanged\n* CloseAccount\n\n* ContactCardAccountHolder',
    )
    receiptFreeText: Optional[str] = Field(
        None, description='Message to be displayed on the terminal.'
    )
    recurring_contractTypes: Optional[str] = Field(
        None,
        alias='recurring.contractTypes',
        description='The recurring contract types applicable to the transaction.',
    )
    recurring_firstPspReference: Optional[str] = Field(
        None,
        alias='recurring.firstPspReference',
        description="The `pspReference`, of the first recurring payment that created the recurring detail.\n\nThis functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.",
    )
    recurring_recurringDetailReference: Optional[str] = Field(
        None,
        alias='recurring.recurringDetailReference',
        description='The reference that uniquely identifies the recurring transaction.',
    )
    recurring_shopperReference: Optional[str] = Field(
        None,
        alias='recurring.shopperReference',
        description='The provided reference of the shopper for a recurring transaction.',
    )
    recurringProcessingModel: Optional[RecurringProcessingModel] = Field(
        None, description='The processing model used for the recurring transaction.'
    )
    referred: Optional[str] = Field(
        None,
        description='If the payment is referred, this field is set to true.\n\nThis field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.\n\nExample: true',
    )
    refusalReasonRaw: Optional[str] = Field(
        None,
        description='Raw refusal reason received from the acquirer, where available.\n\nExample: AUTHORISED',
    )
    requestAmount: Optional[str] = Field(
        None, description='The amount of the payment request.'
    )
    requestCurrencyCode: Optional[str] = Field(
        None, description='The currency of the payment request.'
    )
    shopperInteraction: Optional[str] = Field(
        None,
        description='The shopper interaction type of the payment request.\n\nExample: Ecommerce',
    )
    shopperReference: Optional[str] = Field(
        None,
        description='The shopperReference passed in the payment request.\n\nExample: AdyenTestShopperXX',
    )
    terminalId: Optional[str] = Field(
        None,
        description='The terminal ID used in a point-of-sale payment.\n\nExample: 06022622',
    )
    threeDAuthenticated: Optional[str] = Field(
        None,
        description='A Boolean value indicating whether 3DS authentication was completed on this payment.\n\nExample: true',
    )
    threeDAuthenticatedResponse: Optional[str] = Field(
        None,
        description='The raw 3DS authentication result from the card issuer.\n\nExample: N',
    )
    threeDOffered: Optional[str] = Field(
        None,
        description='A Boolean value indicating whether 3DS was offered for this payment.\n\nExample: true',
    )
    threeDOfferedResponse: Optional[str] = Field(
        None,
        description='The raw enrollment result from the 3DS directory services of the card schemes.\n\nExample: Y',
    )
    threeDSVersion: Optional[str] = Field(None, description='The 3D Secure 2 version.')
    visaTransactionId: Optional[str] = Field(
        None,
        description='The `visaTransactionId`, has a fixed length of 15 numeric characters.\n\n> Contact Support Team to enable this field.',
    )
    xid: Optional[str] = Field(
        None,
        description="The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse 'N' or 'Y'. If you want to submit the xid in your 3D Secure 1 request, use the `mpiData.xid`, field.\n\nExample: ODgxNDc2MDg2MDExODk5MAAAAAA=",
    )


class ResponseAdditionalDataInstallments(BaseModel):
    installmentPaymentData_installmentType: Optional[str] = Field(
        None,
        alias='installmentPaymentData.installmentType',
        description='Type of installment. The value of `installmentType` should be **IssuerFinanced**.',
    )
    installmentPaymentData_option_itemNr__annualPercentageRate: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].annualPercentageRate',
        description='Annual interest rate.',
    )
    installmentPaymentData_option_itemNr__firstInstallmentAmount: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].firstInstallmentAmount',
        description='First Installment Amount in minor units.',
    )
    installmentPaymentData_option_itemNr__installmentFee: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].installmentFee',
        description='Installment fee amount in minor units.',
    )
    installmentPaymentData_option_itemNr__interestRate: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].interestRate',
        description='Interest rate for the installment period.',
    )
    installmentPaymentData_option_itemNr__maximumNumberOfInstallments: Optional[str] = (
        Field(
            None,
            alias='installmentPaymentData.option[itemNr].maximumNumberOfInstallments',
            description='Maximum number of installments possible for this payment.',
        )
    )
    installmentPaymentData_option_itemNr__minimumNumberOfInstallments: Optional[str] = (
        Field(
            None,
            alias='installmentPaymentData.option[itemNr].minimumNumberOfInstallments',
            description='Minimum number of installments possible for this payment.',
        )
    )
    installmentPaymentData_option_itemNr__numberOfInstallments: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].numberOfInstallments',
        description='Total number of installments possible for this payment.',
    )
    installmentPaymentData_option_itemNr__subsequentInstallmentAmount: Optional[str] = (
        Field(
            None,
            alias='installmentPaymentData.option[itemNr].subsequentInstallmentAmount',
            description='Subsequent Installment Amount in minor units.',
        )
    )
    installmentPaymentData_option_itemNr__totalAmountDue: Optional[str] = Field(
        None,
        alias='installmentPaymentData.option[itemNr].totalAmountDue',
        description='Total amount in minor units.',
    )
    installmentPaymentData_paymentOptions: Optional[str] = Field(
        None,
        alias='installmentPaymentData.paymentOptions',
        description='Possible values:\n* PayInInstallmentsOnly\n* PayInFullOnly\n* PayInFullOrInstallments',
    )
    installments_value: Optional[str] = Field(
        None,
        alias='installments.value',
        description='The number of installments that the payment amount should be charged with.\n\nExample: 5\n> Only relevant for card payments in countries that support installments.',
    )


class ResponseAdditionalDataNetworkTokens(BaseModel):
    networkToken_available: Optional[str] = Field(
        None,
        alias='networkToken.available',
        description='Indicates whether a network token is available for the specified card.',
    )
    networkToken_bin: Optional[str] = Field(
        None,
        alias='networkToken.bin',
        description='The Bank Identification Number of a tokenized card, which is the first six digits of a card number.',
    )
    networkToken_tokenSummary: Optional[str] = Field(
        None,
        alias='networkToken.tokenSummary',
        description='The last four digits of a network token.',
    )


class ResponseAdditionalDataOpi(BaseModel):
    opi_transToken: Optional[str] = Field(
        None,
        alias='opi.transToken',
        description='Returned in the response if you included `opi.includeTransToken: true` in an ecommerce payment request. This contains an Oracle Payment Interface token that you can store in your Oracle Opera database to identify tokenized ecommerce transactions. For more information and required settings, see [Oracle Opera](https://docs.adyen.com/plugins/oracle-opera#opi-token-ecommerce).',
    )


class ResponseAdditionalDataSepa(BaseModel):
    sepadirectdebit_dateOfSignature: Optional[str] = Field(
        None,
        alias='sepadirectdebit.dateOfSignature',
        description='The transaction signature date.\n\nFormat: yyyy-MM-dd',
    )
    sepadirectdebit_mandateId: Optional[str] = Field(
        None,
        alias='sepadirectdebit.mandateId',
        description='Its value corresponds to the pspReference value of the transaction.',
    )
    sepadirectdebit_sequenceType: Optional[str] = Field(
        None,
        alias='sepadirectdebit.sequenceType',
        description='This field can take one of the following values:\n* OneOff: (OOFF) Direct debit instruction to initiate exactly one direct debit transaction.\n\n* First: (FRST) Initial/first collection in a series of direct debit instructions.\n* Recurring: (RCUR) Direct debit instruction to carry out regular direct debit transactions initiated by the creditor.\n* Final: (FNAL) Last/final collection in a series of direct debit instructions.\n\nExample: OOFF',
    )


class ServiceError(BaseModel):
    additionalData: Optional[Dict[str, str]] = Field(
        None,
        description='Contains additional information about the payment. Some data fields are included only if you select them first. Go to **Customer Area** > **Developers** > **Additional data**.',
    )
    errorCode: Optional[str] = Field(
        None, description='The error code mapped to the error message.'
    )
    errorType: Optional[str] = Field(None, description='The category of the error.')
    message: Optional[str] = Field(
        None, description='A short explanation of the issue.'
    )
    pspReference: Optional[str] = Field(
        None, description='The PSP reference of the payment.'
    )
    status: Optional[int] = Field(None, description='The HTTP response status.')


class EntityType(Enum):
    NaturalPerson = 'NaturalPerson'
    Company = 'Company'


class StoreDetailAndSubmitRequest(BaseModel):
    additionalData: Optional[Dict[str, str]] = Field(
        None,
        description='This field contains additional data, which may be required for a particular request.',
    )
    amount: Amount = Field(
        ...,
        description='A container object for the payable amount information of the transaction.',
    )
    bank: Optional[BankAccount] = Field(
        None,
        description='A container for bank account data.\n> This field is mandatory if `card` is not provided.',
    )
    billingAddress: Optional[Address] = Field(
        None,
        description='The billing address.\n\n> The `billingAddress` object is required for cross-border payouts to and from Canada. Include all of the fields within this object.',
    )
    card: Optional[Card] = Field(
        None,
        description='A container for card data.\n> This field is mandatory if `bank` is not provided.',
    )
    dateOfBirth: date = Field(
        ...,
        description='The date of birth.\nFormat: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD\nFor Paysafecard it must be the same as used when registering the Paysafecard account.\n> This field is mandatory for natural persons.',
    )
    entityType: EntityType = Field(
        ..., description='The type of the entity the payout is processed for.'
    )
    fraudOffset: Optional[int] = Field(
        None,
        description='An integer value that is added to the normal fraud score. The value can be either positive or negative.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    nationality: constr(max_length=2) = Field(
        ...,
        description="The shopper's nationality.\n\nA valid value is an ISO 2-character country code (e.g. 'NL').",
    )
    recurring: Recurring = Field(
        ...,
        description='A container for the type of recurring contract to be retrieved.\n\nThe recurring.contract must be set to `PAYOUT`',
    )
    reference: str = Field(
        ...,
        description='The merchant reference for this payment. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.',
    )
    selectedBrand: Optional[str] = Field(
        None,
        description='The name of the brand to make a payout to.\n\nFor Paysafecard it must be set to `paysafecard`.',
    )
    shopperEmail: str = Field(..., description="The shopper's email address.")
    shopperName: Optional[Name] = Field(
        None,
        description="The shopper's name.\n\nWhen the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.",
    )
    shopperReference: str = Field(
        ..., description="The shopper's reference for the payment transaction."
    )
    shopperStatement: Optional[str] = Field(
        None,
        description='The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method).',
    )
    socialSecurityNumber: Optional[str] = Field(
        None, description="The shopper's social security number."
    )
    telephoneNumber: Optional[str] = Field(
        None, description="The shopper's phone number."
    )


class StoreDetailAndSubmitResponse(BaseModel):
    additionalData: Optional[Dict[str, str]] = Field(
        None,
        description='This field contains additional data, which may be returned in a particular response.',
    )
    pspReference: str = Field(
        ..., description='A new reference to uniquely identify this request.'
    )
    refusalReason: Optional[str] = Field(
        None, description='In case of refusal, an informational message for the reason.'
    )
    resultCode: str = Field(
        ...,
        description='The response:\n\n* In case of success is payout-submit-received.\n* In case of an error, an informational message is returned.',
    )


class StoreDetailRequest(BaseModel):
    additionalData: Optional[Dict[str, str]] = Field(
        None,
        description='This field contains additional data, which may be required for a particular request.',
    )
    bank: Optional[BankAccount] = Field(
        None,
        description='A container for bank account data.\n> This field is mandatory if `card` is not provided.',
    )
    billingAddress: Optional[Address] = Field(
        None,
        description='The billing address.\n\n> The `billingAddress` object is required for cross-border payouts to and from Canada. Include all of the fields within this object.',
    )
    card: Optional[Card] = Field(
        None,
        description='A container for card data.\n> This field is mandatory if `bank` is not provided.',
    )
    dateOfBirth: date = Field(
        ...,
        description='The date of birth.\nFormat: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD\nFor Paysafecard it must be the same as used when registering the Paysafecard account.\n> This field is mandatory for natural persons.',
    )
    entityType: EntityType = Field(
        ..., description='The type of the entity the payout is processed for.'
    )
    fraudOffset: Optional[int] = Field(
        None,
        description='An integer value that is added to the normal fraud score. The value can be either positive or negative.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    nationality: constr(max_length=2) = Field(
        ...,
        description="The shopper's nationality.\n\nA valid value is an ISO 2-character country code (e.g. 'NL').",
    )
    recurring: Recurring = Field(
        ...,
        description='A container for the type of recurring contract to be retrieved.\n\nThe recurring.contract must be set to `PAYOUT`',
    )
    selectedBrand: Optional[str] = Field(
        None,
        description='The name of the brand to make a payout to.\n\nFor Paysafecard it must be set to `paysafecard`.',
    )
    shopperEmail: str = Field(..., description="The shopper's email address.")
    shopperName: Optional[Name] = Field(
        None,
        description="The shopper's name.\n\nWhen the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.",
    )
    shopperReference: str = Field(
        ..., description="The shopper's reference for the payment transaction."
    )
    socialSecurityNumber: Optional[str] = Field(
        None, description="The shopper's social security number."
    )
    telephoneNumber: Optional[str] = Field(
        None, description="The shopper's phone number."
    )


class StoreDetailResponse(BaseModel):
    additionalData: Optional[Dict[str, str]] = Field(
        None,
        description='This field contains additional data, which may be returned in a particular response.',
    )
    pspReference: str = Field(
        ..., description='A new reference to uniquely identify this request.'
    )
    recurringDetailReference: str = Field(
        ...,
        description='The token which you can use later on for submitting the payout.',
    )
    resultCode: str = Field(
        ...,
        description='The result code of the transaction. `Success` indicates that the details were stored successfully.',
    )


class SubmitRequest(BaseModel):
    additionalData: Optional[Dict[str, str]] = Field(
        None,
        description='This field contains additional data, which may be required for a particular request.',
    )
    amount: Amount = Field(
        ...,
        description='A container object for the payable amount information of the transaction.',
    )
    dateOfBirth: Optional[date] = Field(
        None,
        description='The date of birth.\nFormat: ISO-8601; example: YYYY-MM-DD\n\nFor Paysafecard it must be the same as used when registering the Paysafecard account.\n\n> This field is mandatory for natural persons. \n> This field is required to update the existing `dateOfBirth` that is associated with this recurring contract.',
    )
    entityType: Optional[EntityType] = Field(
        None,
        description='The type of the entity the payout is processed for.\n\nAllowed values:\n* NaturalPerson\n* Company\n> This field is required to update the existing `entityType` that is associated with this recurring contract.',
    )
    fraudOffset: Optional[int] = Field(
        None,
        description='An integer value that is added to the normal fraud score. The value can be either positive or negative.',
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier you want to process the transaction request with.',
    )
    nationality: Optional[str] = Field(
        None,
        description="The shopper's nationality.\n\nA valid value is an ISO 2-character country code (e.g. 'NL').\n\n> This field is required to update the existing nationality that is associated with this recurring contract.",
    )
    recurring: Recurring = Field(
        ...,
        description='A container for the type of recurring contract to be retrieved.\n\nThe `recurring.contract` must be set to "PAYOUT".',
    )
    reference: str = Field(
        ...,
        description='The merchant reference for this payout. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.',
    )
    selectedRecurringDetailReference: str = Field(
        ...,
        description='This is the `recurringDetailReference` you want to use for this payout.\n\nYou can use the value LATEST to select the most recently used recurring detail.',
    )
    shopperEmail: str = Field(..., description="The shopper's email address.")
    shopperName: Optional[Name] = Field(
        None,
        description="The shopper's name.\n\nIn case the `entityType` is `Company`, the `shopperName.lastName` must contain the company name.\n\n> This field is required to update the existing `shopperName` associated with a recurring contract.",
    )
    shopperReference: str = Field(
        ..., description="The shopper's reference for the payout transaction."
    )
    shopperStatement: Optional[str] = Field(
        None,
        description='The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method).',
    )
    socialSecurityNumber: Optional[str] = Field(
        None, description="The shopper's social security number."
    )


class SubmitResponse(BaseModel):
    additionalData: Optional[Dict[str, str]] = Field(
        None,
        description='This field contains additional data, which may be returned in a particular response.',
    )
    pspReference: str = Field(
        ..., description='A new reference to uniquely identify this request.'
    )
    refusalReason: Optional[str] = Field(
        None, description='In case of refusal, an informational message for the reason.'
    )
    resultCode: str = Field(
        ...,
        description='The response:\n* In case of success, it is `payout-submit-received`.\n* In case of an error, an informational message is returned.',
    )


class FundSource(BaseModel):
    additionalData: Optional[Dict[str, str]] = Field(
        None,
        description='A map of name-value pairs for passing additional or industry-specific data.',
    )
    billingAddress: Optional[Address] = Field(
        None, description='The address where to send the invoice.'
    )
    card: Optional[Card] = Field(
        None,
        description='Credit card data.\n\nOptional if `shopperReference` and `selectedRecurringDetailReference` are provided.',
    )
    shopperEmail: Optional[str] = Field(
        None, description='Email address of the person.'
    )
    shopperName: Optional[Name] = Field(None, description='Name of the person.')
    telephoneNumber: Optional[str] = Field(
        None, description='Phone number of the person'
    )


class PayoutRequest(BaseModel):
    amount: Amount = Field(
        ...,
        description='The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).',
    )
    billingAddress: Optional[Address] = Field(
        None,
        description='The address where to send the invoice.\n> The `billingAddress` object is required in the following scenarios. Include all of the fields within this object.\n>* For 3D Secure 2 transactions in all browser-based and mobile implementations.\n>* For cross-border payouts to and from Canada.',
    )
    card: Optional[Card] = Field(
        None,
        description='A container for card data.\n> Either `bankAccount` or `card` field must be provided in a payment request.',
    )
    fraudOffset: Optional[int] = Field(
        None,
        description='An integer value that is added to the normal fraud score. The value can be either positive or negative.',
    )
    fundSource: Optional[FundSource] = Field(
        None, description='The person or entity funding the money.'
    )
    merchantAccount: str = Field(
        ...,
        description='The merchant account identifier, with which you want to process the transaction.',
    )
    recurring: Optional[Recurring] = Field(
        None,
        description='The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/classic-integration/recurring-payments).',
    )
    reference: str = Field(
        ...,
        description='The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.\nIf you need to provide multiple references for a transaction, separate them with hyphens ("-").\nMaximum length: 80 characters.',
    )
    selectedRecurringDetailReference: Optional[str] = Field(
        None,
        description='The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.',
    )
    shopperEmail: Optional[str] = Field(
        None,
        description="The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.\n> For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.",
    )
    shopperInteraction: Optional[ShopperInteraction] = Field(
        None,
        description='Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.',
    )
    shopperName: Optional[Name] = Field(None, description="The shopper's full name.")
    shopperReference: Optional[str] = Field(
        None,
        description='Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.',
    )
    telephoneNumber: Optional[str] = Field(
        None, description="The shopper's telephone number."
    )


class PayoutResponse(BaseModel):
    additionalData: Optional[
        Union[
            ResponseAdditionalData3DSecure,
            ResponseAdditionalDataBillingAddress,
            ResponseAdditionalDataCard,
            ResponseAdditionalDataCommon,
            ResponseAdditionalDataInstallments,
            ResponseAdditionalDataNetworkTokens,
            ResponseAdditionalDataOpi,
            ResponseAdditionalDataSepa,
        ]
    ] = Field(
        None,
        description='Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** > **Developers** > **Additional data**.',
    )
    authCode: Optional[str] = Field(
        None,
        description='Authorisation code:\n* When the payment is authorised successfully, this field holds the authorisation code for the payment.\n* When the payment is not authorised, this field is empty.',
    )
    dccAmount: Optional[Amount] = Field(
        None,
        description='Includes the currency of the conversion and the value of the transaction.\n> This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).',
    )
    dccSignature: Optional[str] = Field(
        None,
        description='Cryptographic signature used to verify `dccQuote`.\n> This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).',
    )
    fraudResult: Optional[FraudResult] = Field(
        None, description='The fraud result properties of the payment.'
    )
    issuerUrl: Optional[str] = Field(
        None,
        description='The URL to direct the shopper to.\n> In case of SecurePlus, do not redirect a shopper to this URL.',
    )
    md: Optional[constr(max_length=20000)] = Field(
        None, description='The payment session.'
    )
    paRequest: Optional[str] = Field(
        None,
        description='The 3D request data for the issuer.\n\nIf the value is **CUPSecurePlus-CollectSMSVerificationCode**, collect an SMS code from the shopper and pass it in the `/authorise3D` request. For more information, see [3D Secure](https://docs.adyen.com/classic-integration/3d-secure).',
    )
    pspReference: Optional[str] = Field(
        None,
        description="Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.",
    )
    refusalReason: Optional[str] = Field(
        None,
        description="If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n\nFor more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).",
    )
    resultCode: Optional[ResultCode] = Field(
        None,
        description="The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).\n\nPossible values:\n\n* **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions.\n* **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only).\n* **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.\n* **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.\n* **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state.\n* **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment.\n* **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment.\n* **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments.\n* **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation.\n* **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.",
    )
